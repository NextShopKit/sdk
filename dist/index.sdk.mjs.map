{"version":3,"sources":["../src/clients/createSharedShopify.ts","../src/utils/buildMetafieldIdentifiers.ts","../src/utils/camelizeKeys.ts","../src/utils/castMetafields.ts","../src/utils/castMetafieldValue.ts","../src/utils/formatAvailableFilters.ts","../src/utils/normalizeMetafields.ts","../src/utils/renderRichText.ts","../src/utils/safeParseArray.ts","../src/utils/tryParseArrayOrReturnOriginal.ts","../src/utils/formatGID.ts","../src/utils/log.ts","../src/utils/safeExtract.ts","../src/graphql/cart/addToCart.ts","../src/graphql/cart/applyDiscount.ts","../src/graphql/cart/createCart.ts","../src/graphql/cart/getCart.ts","../src/graphql/cart/mergeCarts.ts","../src/graphql/cart/removeDiscount.ts","../src/graphql/cart/removeFromCart.ts","../src/graphql/cart/updateBuyerIdentity.ts","../src/graphql/cart/updateCartAttributes.ts","../src/graphql/cart/updateCartItem.ts","../src/graphql/products/getProductByHandle.ts","../src/graphql/products/getProductById.ts","../src/graphql/collections/getCollectionProducts.ts","../src/actions/products/getProduct.ts","../src/actions/collections/getCollection.ts","../src/actions/cart/actions/index.ts","../src/actions/cart/actions/createCart.ts","../src/actions/cart/actions/getCart.ts","../src/actions/cart/mutations/index.ts","../src/actions/cart/mutations/addToCart.ts","../src/actions/cart/mutations/removeFromCart.ts","../src/actions/cart/mutations/updateCartItem.ts","../src/actions/cart/mutations/applyDiscount.ts","../src/actions/cart/mutations/removeDiscount.ts","../src/actions/cart/mutations/emptyCart.ts","../src/actions/cart/mutations/mergeCarts.ts","../src/actions/cart/mutations/updateBuyerIdentity.ts","../src/actions/cart/mutations/updateCartAttributes.ts","../src/clients/createBaseClient.ts","../src/clients/createShopifyClient.ts"],"sourcesContent":["import { FetchOptions, ShopifyClientConfig } from \"@t\";\n\nexport function createSharedShopify(config: ShopifyClientConfig) {\n  const apiVersion = config.apiVersion || \"2025-01\";\n  const endpoint = `https://${config.shop}/api/${apiVersion}/graphql.json`;\n\n  // Memory cache setup\n  const memoryCache = new Map<string, { timestamp: number; data: any }>();\n\n  function generateKey(query: string, variables: Record<string, any>) {\n    return JSON.stringify({ query, variables });\n  }\n\n  async function fetchShopify<T = any>(\n    query: string,\n    variables: Record<string, any> = {},\n    options: FetchOptions = {}\n  ): Promise<T> {\n    const {\n      useMemoryCache = config.enableMemoryCache,\n      useVercelCache = config.enableVercelCache,\n      cacheTtl = config.defaultCacheTtl ?? 60,\n      revalidate = config.defaultRevalidate ?? 60,\n    } = options;\n\n    const key = generateKey(query, variables);\n    const now = Date.now();\n\n    // ✅ Memory cache check\n    if (useMemoryCache && memoryCache.has(key)) {\n      const { timestamp, data } = memoryCache.get(key)!;\n      if (now - timestamp < cacheTtl * 1000) {\n        return data;\n      }\n    }\n\n    const headers: Record<string, string> = {\n      \"Content-Type\": \"application/json\",\n      \"X-Shopify-Storefront-Access-Token\": config.token,\n    };\n\n    if (useVercelCache && typeof window === \"undefined\") {\n      headers[\"Cache-Control\"] =\n        `s-maxage=${revalidate}, stale-while-revalidate=30`;\n    }\n\n    const fetchOptions: RequestInit & { next?: { revalidate: number } } = {\n      method: \"POST\",\n      headers,\n      body: JSON.stringify({ query, variables }),\n    };\n\n    const res = await fetch(endpoint, fetchOptions);\n    const json = await res.json();\n\n    if (json.errors) {\n      throw new Error(json.errors[0]?.message || \"Shopify GraphQL error\");\n    }\n\n    // ✅ Store in memory cache\n    if (useMemoryCache) {\n      memoryCache.set(key, { timestamp: now, data: json });\n    }\n\n    return json;\n  }\n\n  return {\n    fetchShopify,\n    clearCache: () => memoryCache.clear(),\n    getCache: () => memoryCache,\n  };\n}\n","import { CustomMetafieldDefinition } from \"@t\";\n\nexport function buildMetafieldIdentifiers(\n  metafields: CustomMetafieldDefinition[]\n): string {\n  return metafields\n    .map(({ field }) => {\n      const [namespace, key] = field.split(\".\");\n      return `{ namespace: \"${namespace}\", key: \"${key}\" }`;\n    })\n    .join(\",\\n\");\n}\n","import { camelCase } from \"lodash-es\";\n\nexport function camelizeMetafields(obj: any): any {\n  if (Array.isArray(obj)) {\n    return obj.map(camelizeMetafields);\n  }\n\n  if (obj !== null && typeof obj === \"object\") {\n    return Object.fromEntries(\n      Object.entries(obj).map(([key, value]) => [\n        camelCase(key),\n        camelizeMetafields(value),\n      ])\n    );\n  }\n\n  // Don't transform strings or primitives\n  return obj;\n}\n","import {\n  FetchOptions,\n  FetchShopify,\n  CustomMetafieldDefinition,\n  ResolvedMetafieldInfo,\n} from \"@t\";\nimport { castMetafieldValue, renderRichText } from \"@utils\";\n\n/**\n * Casts normalized metafields to their correct types.\n * @param normalizedMetafields - Output from normalizeMetafields (nested by namespace).\n * @param definitions - Array of custom metafield definitions.\n * @param renderRichTextAsHtml - If true, rich_text fields are rendered as HTML.\n * @param transformMetafields - Optional post-processing function.\n * @param resolveFiles - Whether to resolve File GIDs into file objects.\n * @param fetchShopify - Required for resolving File types.\n * @returns A nested object with properly cast metafield values.\n */\nexport async function castMetafields(\n  normalizedMetafields: Record<string, Record<string, string>>,\n  definitions: CustomMetafieldDefinition[],\n  renderRichTextAsHtml: boolean,\n  transformMetafields?: (\n    raw: Record<string, Record<string, string>>,\n    casted: Record<string, any>,\n    definitions: ResolvedMetafieldInfo[]\n  ) => Record<string, any> | Promise<Record<string, any>>,\n  resolveFiles: boolean = false,\n  fetchShopify?: FetchShopify,\n  options: FetchOptions = {}\n): Promise<Record<string, any>> {\n  const result: Record<string, any> = {};\n  const resolvedDefs: ResolvedMetafieldInfo[] = [];\n  const fileGIDs: string[] = [];\n\n  for (const def of definitions) {\n    const [namespace, key] = def.field.split(\".\");\n    const rawValue = normalizedMetafields?.[namespace]?.[key];\n\n    resolvedDefs.push({\n      namespace,\n      key,\n      fullKey: def.field,\n      type: def.type,\n    });\n\n    if (rawValue === undefined) continue;\n    result[namespace] = result[namespace] || {};\n\n    // Rich text HTML\n    if (def.type === \"rich_text\" && renderRichTextAsHtml) {\n      result[namespace][key] = renderRichText(rawValue);\n      continue;\n    }\n\n    // File types\n    if (def.type === \"File\" && resolveFiles) {\n      const casted = castMetafieldValue(rawValue, def.type);\n\n      if (Array.isArray(casted)) {\n        fileGIDs.push(...casted);\n      } else if (typeof casted === \"string\") {\n        fileGIDs.push(casted);\n      }\n\n      result[namespace][key] = casted;\n      continue;\n    }\n\n    // All other types\n    result[namespace][key] = castMetafieldValue(rawValue, def.type);\n  }\n\n  // 🧩 Resolve File GIDs to actual file objects\n  if (resolveFiles && fileGIDs.length > 0 && fetchShopify) {\n    const { resolveShopifyFiles } = await import(\"./resolveShopifyFiles\");\n    const fileMap = await resolveShopifyFiles(fileGIDs, fetchShopify, options);\n\n    for (const def of definitions) {\n      if (def.type !== \"File\") continue;\n      const [namespace, key] = def.field.split(\".\");\n      const raw = result[namespace]?.[key];\n\n      if (Array.isArray(raw)) {\n        result[namespace][key] = raw.map((gid: string) => fileMap[gid] || gid);\n      } else if (typeof raw === \"string\") {\n        result[namespace][key] = fileMap[raw] || raw;\n      }\n    }\n  }\n\n  // 🧠 Final transformation\n  if (typeof transformMetafields === \"function\") {\n    return transformMetafields(normalizedMetafields, result, resolvedDefs);\n  }\n\n  return result;\n}\n","import { ShopifyCustomFieldType } from \"@t\";\nimport { tryParseArrayOrReturnOriginal, parseStringifiedArray } from \"@utils\";\n\nfunction castSingleValue(value: string, type: ShopifyCustomFieldType): unknown {\n  switch (type) {\n    case \"integer\":\n    case \"decimal\":\n    case \"money\":\n    case \"rating\":\n    case \"weight\":\n    case \"volume\":\n    case \"dimension\":\n      return Number(value);\n\n    case \"true_false\":\n      return value === \"true\";\n\n    case \"json\":\n      try {\n        return JSON.parse(value);\n      } catch {\n        return value;\n      }\n\n    case \"date\":\n    case \"date_and_time\":\n      return new Date(value);\n\n    case \"Product\":\n    case \"Product_variant\":\n    case \"Customer\":\n    case \"Company\":\n    case \"Page\":\n    case \"Collection\":\n    case \"File\":\n    case \"Metaobject\":\n      return value;\n\n    default:\n      return value;\n  }\n}\n\nexport function castMetafieldValue(\n  rawValue: string,\n  type: ShopifyCustomFieldType\n): unknown {\n  const parsed = tryParseArrayOrReturnOriginal(rawValue);\n\n  if (Array.isArray(parsed)) {\n    return parsed.map((item) =>\n      typeof item === \"string\" ? castSingleValue(item, type) : item\n    );\n  }\n\n  return castSingleValue(parsed, type);\n}\n","import { FilterGroup } from \"@t\";\nimport { safeParseArray } from \"@utils\";\n\nexport function formatAvailableFilters(rawFilters: any[]): FilterGroup[] {\n  return rawFilters.map((group) => ({\n    id: group.id,\n    label: group.label,\n    values: safeParseArray(group.values).map((value: any) => ({\n      id: value.id,\n      label: value.label,\n      count: value.count,\n    })),\n  }));\n}\n","import { CustomMetafieldDefinition } from \"@t\";\n\ntype Metafield = { key: string; value: string };\n\nexport function normalizeMetafields(\n  metafields: (Metafield | null)[],\n  definitions: CustomMetafieldDefinition[]\n): Record<string, any> {\n  const result: Record<string, any> = {};\n\n  // Map: key -> namespace (from definitions like \"custom.title\")\n  const keyToNamespace = new Map<string, string>();\n  for (const def of definitions) {\n    const [namespace, key] = def.field.split(\".\");\n    keyToNamespace.set(key, namespace);\n  }\n\n  for (const field of metafields) {\n    if (!field?.key) continue;\n\n    // Fix: Remove namespace if included in metafield.key\n    const key = field.key.includes(\".\")\n      ? field.key.split(\".\").pop()!\n      : field.key;\n    const namespace = keyToNamespace.get(key) || \"global\";\n\n    if (!result[namespace]) {\n      result[namespace] = {};\n    }\n\n    result[namespace][key] = field.value;\n  }\n\n  return result;\n}\n","/**\n * Converts Shopify rich_text schema (JSON) to HTML.\n *\n * @param schema - The rich text schema object or JSON string.\n * @param options - Conversion options.\n * @param options.scoped - A string for a CSS class name or `true` to use the default (\"rte\").\n * @param options.classes - Optional mapping of tag names to CSS class names.\n * @param options.newLineToBreak - If true, converts newlines in plain text to <br>.\n * @returns The resulting HTML string.\n */\nexport function renderRichText(\n  schema: any,\n  options: {\n    scoped?: string | boolean;\n    classes?: Record<string, string>;\n    newLineToBreak?: boolean;\n  } = {}\n): string {\n  let { scoped, classes, newLineToBreak } = options;\n  let html = \"\";\n\n  // If schema is a JSON string, parse it.\n  if (typeof schema === \"string\") {\n    try {\n      schema = JSON.parse(schema);\n    } catch (error) {\n      console.error(\"Error parsing rich text schema:\", error);\n      return schema; // fallback: return the original string\n    }\n  }\n\n  // Allow options itself to be provided as a simple value for scoped\n  if (typeof options === \"string\" || typeof options === \"boolean\") {\n    scoped = options;\n  }\n\n  // If schema is the root object with children\n  if (\n    schema &&\n    schema.type === \"root\" &&\n    Array.isArray(schema.children) &&\n    schema.children.length > 0\n  ) {\n    if (scoped) {\n      const className = scoped === true ? \"rte\" : scoped;\n      html += `<div class=\"${className}\">${renderRichText(\n        schema.children,\n        options\n      )}</div>`;\n    } else {\n      html += renderRichText(schema.children, options);\n    }\n  } else if (Array.isArray(schema)) {\n    // Iterate over each element in the array\n    for (const el of schema) {\n      switch (el.type) {\n        case \"paragraph\":\n          html += buildParagraph(el, options);\n          break;\n        case \"heading\":\n          html += buildHeading(el, options);\n          break;\n        case \"list\":\n          html += buildList(el, options);\n          break;\n        case \"list-item\":\n          html += buildListItem(el, options);\n          break;\n        case \"link\":\n          html += buildLink(el, options);\n          break;\n        case \"text\":\n          html += buildText(el, options);\n          break;\n        default:\n          break;\n      }\n    }\n  }\n  return html;\n}\n\nfunction getClass(\n  tag: string,\n  classes?: Record<string, string>\n): string | null {\n  if (classes && classes[tag]) {\n    return classes[tag];\n  }\n  return null;\n}\n\nfunction outputAttributes(attributes: Record<string, any>): string {\n  if (!attributes) return \"\";\n  return Object.keys(attributes)\n    .filter((key) => attributes[key])\n    .map((key) => ` ${key}=\"${attributes[key]}\"`)\n    .join(\"\");\n}\n\nfunction createElement(\n  tag: string,\n  classes: Record<string, string> | undefined,\n  content: string,\n  attributes: Record<string, any> = {}\n): string {\n  const className = getClass(tag, classes);\n  if (className) {\n    attributes = { ...attributes, class: className };\n  }\n  return `<${tag}${outputAttributes(attributes)}>${content}</${tag}>`;\n}\n\nfunction buildParagraph(el: any, options: any): string {\n  const { classes } = options;\n  return createElement(\"p\", classes, renderRichText(el?.children, options));\n}\n\nfunction buildHeading(el: any, options: any): string {\n  const { classes } = options;\n  const tag = `h${el?.level || 1}`;\n  return createElement(tag, classes, renderRichText(el?.children, options));\n}\n\nfunction buildList(el: any, options: any): string {\n  const { classes } = options;\n  const tag = el?.listType === \"ordered\" ? \"ol\" : \"ul\";\n  return createElement(tag, classes, renderRichText(el?.children, options));\n}\n\nfunction buildListItem(el: any, options: any): string {\n  const { classes } = options;\n  return createElement(\"li\", classes, renderRichText(el?.children, options));\n}\n\nfunction buildLink(el: any, options: any): string {\n  const { classes } = options;\n  const attributes = {\n    href: el?.url,\n    title: el?.title,\n    target: el?.target,\n  };\n  return createElement(\n    \"a\",\n    classes,\n    renderRichText(el?.children, options),\n    attributes\n  );\n}\n\nfunction buildText(el: any, options: any): string {\n  const { classes, newLineToBreak } = options;\n  if (el?.bold && el?.italic) {\n    return createElement(\n      \"strong\",\n      classes,\n      createElement(\"em\", classes, el?.value)\n    );\n  } else if (el?.bold) {\n    return createElement(\"strong\", classes, el?.value);\n  } else if (el?.italic) {\n    return createElement(\"em\", classes, el?.value);\n  } else {\n    return newLineToBreak\n      ? el?.value?.replace(/\\n/g, \"<br>\") || \"\"\n      : el?.value || \"\";\n  }\n}\n","export function safeParseArray<T = any>(value: T[] | null | undefined): T[] {\n  return Array.isArray(value) ? value : [];\n}\n","export function tryParseArrayOrReturnOriginal(\n  value: string\n): string | string[] {\n  try {\n    const parsed = JSON.parse(value);\n    if (Array.isArray(parsed)) return parsed;\n    return value;\n  } catch {\n    return value;\n  }\n}\n","/**\n * Formats a raw ID into a Shopify Global ID (GID).\n * Returns: \"gid://shopify/{resource}/{id}\"\n *\n * @param id - Raw ID (e.g., \"123456789\").\n * @param resource - Shopify resource name (e.g., \"Collection\", \"Product\").\n * @returns Shopify GID string (e.g., \"gid://shopify/Collection/123456789\").\n */\nexport function formatGID(id: string, resource: string): string {\n    if (!id || !resource) throw new Error(\"Both id and resource are required.\");\n    return `gid://shopify/${resource}/${id}`;\n}\n","// utils/log.ts\n\nconst isDev = process.env.NODE_ENV === \"development\";\n\nexport function log(...args: any[]) {\n  if (isDev) {\n    console.log(...args);\n  }\n}\n\nexport function debug(...args: any[]) {\n  if (isDev) {\n    console.debug(...args);\n  }\n}\n\nexport function info(...args: any[]) {\n  if (isDev) {\n    console.info(...args);\n  }\n}\n\nexport function warn(...args: any[]) {\n  if (isDev) {\n    console.warn(...args);\n  }\n}\n\nexport function error(...args: any[]) {\n  if (isDev) {\n    console.error(...args);\n  }\n}\n","import { debug, error } from \"@utils\";\n\n/**\n * Safely extract a nested value from a GraphQL response.\n * Logs and throws (in dev) if the value is missing.\n */\nexport function safeExtract<T>(\n  label: string,\n  value: T | undefined | null,\n  context?: Record<string, unknown>\n): T {\n  if (!value) {\n    error(`[${label}] Response missing or invalid`, context);\n\n    if (process.env.NODE_ENV === \"development\") {\n      throw new Error(`[${label}] Missing or undefined value`);\n    }\n  }\n\n  if (process.env.NODE_ENV === \"development\") {\n    debug(`[${label}] Success`, value);\n  }\n\n  return value as T;\n}\n","export const addToCartMutation = `\n  mutation addToCart($cartId: ID!, $lines: [CartLineInput!]!) {\n    cartLinesAdd(cartId: $cartId, lines: $lines) {\n      cart {\n        id\n        checkoutUrl\n        cost {\n          totalAmount { amount currencyCode }\n        }\n      }\n    }\n  }\n`;\n","export const applyDiscountMutation = `\n  mutation applyDiscount($cartId: ID!, $discountCodes: [String!]!) {\n    cartDiscountCodesUpdate(cartId: $cartId, discountCodes: $discountCodes) {\n      cart {\n        id\n        checkoutUrl\n        cost {\n          totalAmount { amount currencyCode }\n        }\n      }\n    }\n  }\n`;\n","export const createCartMutation = `\n  mutation createCart($attributes: [AttributeInput!]) {\n    cartCreate(input: { attributes: $attributes }) {\n      cart {\n        id\n        checkoutUrl\n        cost {\n          totalAmount { amount currencyCode }\n        }\n      }\n    }\n  }\n`;\n","export function getCartQuery(\n  productMetafieldIdentifiers: string = \"\",\n  variantMetafieldIdentifiers: string = \"\",\n  lineLimit: number = 250 // default to max\n) {\n  return `\n    query getCart($cartId: ID!) {\n      cart(id: $cartId) {\n        id\n        checkoutUrl\n        cost {\n          totalAmount { amount currencyCode }\n        }\n        lines(first: ${lineLimit}) {\n          edges {\n            node {\n              id\n              quantity\n              merchandise {\n                ... on ProductVariant {\n                  id\n                  title\n                  product {\n                    title\n                    handle\n                    metafields(identifiers: [${productMetafieldIdentifiers}]) {\n                      key\n                      value\n                    }\n                  }\n                  image { url altText }\n                  price { amount currencyCode }\n                  metafields(identifiers: [${variantMetafieldIdentifiers}]) {\n                    key\n                    value\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  `;\n}\n","export const mergeCartsMutation = `\n  mutation mergeCarts($sourceCartId: ID!, $destinationCartId: ID!) {\n    cartMerge(sourceCartId: $sourceCartId, destinationCartId: $destinationCartId) {\n      cart {\n        id\n        checkoutUrl\n        cost {\n          totalAmount { amount currencyCode }\n        }\n      }\n    }\n  }\n`;\n","export const removeDiscountMutation = `\n  mutation removeDiscount($cartId: ID!) {\n    cartDiscountCodesUpdate(cartId: $cartId, discountCodes: []) {\n      cart {\n        id\n        checkoutUrl\n        cost {\n          totalAmount { amount currencyCode }\n        }\n      }\n    }\n  }\n`;\n","export const removeFromCartMutation = `\n  mutation removeFromCart($cartId: ID!, $lineIds: [ID!]!) {\n    cartLinesRemove(cartId: $cartId, lineIds: $lineIds) {\n      cart {\n        id\n        checkoutUrl\n        cost {\n          totalAmount { amount currencyCode }\n        }\n      }\n    }\n  }\n`;\n","export const updateBuyerIdentityMutation = `\n  mutation updateBuyerIdentity($cartId: ID!, $buyerIdentity: CartBuyerIdentityInput!) {\n    cartBuyerIdentityUpdate(cartId: $cartId, buyerIdentity: $buyerIdentity) {\n      cart {\n        id\n        buyerIdentity {\n          email\n          phone\n          countryCode\n          customerAccessToken\n        }\n      }\n    }\n  }\n`;\n","export const updateCartAttributesMutation = `\n  mutation updateCartAttributes($cartId: ID!, $attributes: [AttributeInput!]!) {\n    cartAttributesUpdate(cartId: $cartId, attributes: $attributes) {\n      cart {\n        id\n        attributes {\n          key\n          value\n        }\n      }\n    }\n  }\n`;\n","export const updateCartItemMutation = `\n  mutation updateCartItem($cartId: ID!, $lines: [CartLineUpdateInput!]!) {\n    cartLinesUpdate(cartId: $cartId, lines: $lines) {\n      cart {\n        id\n        checkoutUrl\n        cost {\n          totalAmount { amount currencyCode }\n        }\n      }\n    }\n  }\n`;\n","export const getProductByHandleQuery = (\n  productMetafieldIdentifiers: string,\n  variantMetafieldIdentifiers: string\n) => `\n  query getProductByHandle($handle: String!) {\n    productByHandle(handle: $handle) {\n      id\n      title\n      handle\n      descriptionHtml\n      featuredImage {\n        originalSrc\n        altText\n      }\n      images(first: 10) {\n        edges {\n          node {\n            originalSrc\n            altText\n          }\n        }\n      }\n      variants(first: 10) {\n        edges {\n          node {\n            id\n            title\n            priceV2 { amount, currencyCode }\n            compareAtPriceV2 { amount, currencyCode }\n            product { title, handle }\n            metafields(identifiers: [${variantMetafieldIdentifiers}]) {\n              key\n              value\n            }\n          }\n        }\n      }\n      metafields(identifiers: [${productMetafieldIdentifiers}]) {\n        key\n        value\n      }\n    }\n  }\n`;\n","export const getProductByIdQuery = (\n  productMetafieldIdentifiers: string,\n  variantMetafieldIdentifiers: string\n) => `\n  query getProductById($id: ID!) {\n    node(id: $id) {\n      ... on Product {\n        id\n        title\n        handle\n        descriptionHtml\n        featuredImage {\n          originalSrc\n          altText\n        }\n        images(first: 10) {\n          edges {\n            node {\n              originalSrc\n              altText\n            }\n          }\n        }\n        variants(first: 10) {\n          edges {\n            node {\n              id\n              title\n              priceV2 { amount, currencyCode }\n              compareAtPriceV2 { amount, currencyCode }\n              product { title, handle }\n              metafields(identifiers: [${variantMetafieldIdentifiers}]) {\n                key\n                value\n              }\n            }\n          }\n        }\n        metafields(identifiers: [${productMetafieldIdentifiers}]) {\n          key\n          value\n        }\n      }\n    }\n  }\n`;\n","export function getCollectionProductsQuery(\n  limit: number,\n  productMetafieldIdentifiers: string,\n  hasFilters: boolean,\n  variantMetafieldIdentifiers: string,\n  collectionMetafieldIdentifiers: string,\n  includeProducts: boolean,\n  useId: boolean // ✅ new param\n): string {\n  const collectionSelector = useId ? \"collection(id: $id)\" : \"collection(handle: $handle)\";\n\n  return `\n    query getCollectionProducts(\n      ${useId ? \"$id: ID!\" : \"$handle: String!\"}\n      ${includeProducts ? \", $cursor: String\" : \"\"}\n      ${includeProducts && hasFilters ? \", $filters: [ProductFilter!]\" : \"\"}\n      ${includeProducts ? \", $sortKey: ProductCollectionSortKeys\" : \"\"}\n      ${includeProducts ? \", $reverse: Boolean\" : \"\"}\n    ) {\n      ${collectionSelector} {\n        id\n        title\n        handle\n        description\n        descriptionHtml\n        updatedAt\n        image {\n          id\n          url\n          width\n          height\n          altText\n        }\n        seo {\n          title\n          description\n        }\n        metafields(identifiers: [${collectionMetafieldIdentifiers}]) {\n          namespace\n          key\n          value\n          type\n        }\n        ${includeProducts ? `\n        products(\n          first: ${limit},\n          after: $cursor,\n          sortKey: $sortKey,\n          reverse: $reverse\n          ${hasFilters ? \"filters: $filters,\" : \"\"}\n        ) {\n          pageInfo {\n            hasNextPage\n            hasPreviousPage\n            startCursor\n            endCursor\n          }\n          filters {\n            id\n            label\n            values {\n              id\n              label\n              count\n            }\n          }\n          edges {\n            node {\n              id\n              title\n              handle\n              descriptionHtml\n              featuredImage {\n                originalSrc\n                altText\n              }\n              images(first: 10) {\n                edges {\n                  node {\n                    originalSrc\n                    altText\n                  }\n                }\n              }\n              variants(first: 10) {\n                edges {\n                  node {\n                    id\n                    title\n                    priceV2 { amount currencyCode }\n                    compareAtPriceV2 { amount currencyCode }\n                    product { title handle }\n                    metafields(identifiers: [${variantMetafieldIdentifiers}]) {\n                      key\n                      value\n                    }\n                  }\n                }\n              }\n              metafields(identifiers: [${productMetafieldIdentifiers}]) {\n                key\n                value\n              }\n            }\n          }\n        }\n        ` : \"\"}\n      }\n    }\n  `;\n}\n","import {\n  ImageEdge,\n  FetchShopify,\n  Product,\n  VariantEdge,\n  FetchProductResult,\n  GetProductOptions,\n  Variant,\n  FetchOptions,\n} from \"@t\";\n\nimport {\n  castMetafields,\n  safeParseArray,\n  camelizeMetafields,\n  normalizeMetafields,\n  buildMetafieldIdentifiers,\n} from \"@utils\";\n\nimport { getProductByIdQuery, getProductByHandleQuery } from \"@gql\";\n\nexport async function getProduct(\n  fetchShopify: FetchShopify,\n  args: GetProductOptions,\n  options?: FetchOptions\n): Promise<FetchProductResult> {\n  const {\n    handle,\n    id,\n    customMetafields = [],\n    variantMetafields = [],\n    options: settings,\n  } = args;\n\n  const {\n    locale,\n    renderRichTextAsHtml = false,\n    camelizeKeys = true,\n    resolveFiles = true,\n    transformMetafields,\n    transformVariantMetafields,\n  } = settings;\n\n  if (!handle && !id) {\n    return { data: null, error: \"Either handle or id must be provided\" };\n  }\n\n  const productMetafieldIdentifiers =\n    customMetafields.length > 0\n      ? buildMetafieldIdentifiers(customMetafields)\n      : \"\";\n\n  const variantMetafieldIdentifiers =\n    variantMetafields.length > 0\n      ? buildMetafieldIdentifiers(variantMetafields)\n      : \"\";\n\n  const query = id\n    ? getProductByIdQuery(\n        productMetafieldIdentifiers,\n        variantMetafieldIdentifiers\n      )\n    : getProductByHandleQuery(\n        productMetafieldIdentifiers,\n        variantMetafieldIdentifiers\n      );\n\n  const variables = id ? { id } : { handle, locale };\n\n  try {\n    const json = await fetchShopify(query, variables, options);\n\n    if (json.errors?.length) {\n      return {\n        data: null,\n        error: json.errors[0]?.message || \"GraphQL error\",\n      };\n    }\n\n    const node = id ? json.data?.node : json.data?.productByHandle;\n    if (!node) {\n      return { data: null, error: \"Product not found\" };\n    }\n\n    const rawMetafields = normalizeMetafields(\n      node.metafields || [],\n      customMetafields\n    );\n\n    const castedMetafields =\n      customMetafields.length > 0\n        ? await castMetafields(\n            rawMetafields,\n            customMetafields,\n            renderRichTextAsHtml,\n            transformMetafields,\n            resolveFiles,\n            fetchShopify,\n            options\n          )\n        : rawMetafields;\n\n    const metafields =\n      camelizeKeys !== false\n        ? camelizeMetafields(castedMetafields)\n        : castedMetafields;\n\n    const images = safeParseArray<ImageEdge>(node.images?.edges).map(\n      (edge) => ({\n        originalSrc: edge.node.originalSrc,\n        altText: edge.node.altText ?? null,\n      })\n    );\n\n    const variants: Variant[] = await Promise.all(\n      safeParseArray<VariantEdge>(node.variants?.edges).map(async (edge) => {\n        const variant = edge.node;\n\n        const rawVariantMetafields = normalizeMetafields(\n          variant.metafields || [],\n          variantMetafields\n        );\n\n        const castedVariantMetafields =\n          variantMetafields.length > 0\n            ? await castMetafields(\n                rawVariantMetafields,\n                variantMetafields,\n                renderRichTextAsHtml,\n                transformVariantMetafields,\n                resolveFiles,\n                fetchShopify,\n                options\n              )\n            : rawVariantMetafields;\n\n        const finalVariantMetafields =\n          camelizeKeys !== false\n            ? camelizeMetafields(castedVariantMetafields)\n            : castedVariantMetafields;\n\n        return {\n          id: variant.id,\n          productTitle: variant.product?.title || node.title,\n          variantTitle:\n            variant.title === \"Default Title\" ? node.title : variant.title,\n          price: {\n            amount: parseFloat(variant.priceV2.amount),\n            currencyCode: variant.priceV2.currencyCode,\n          },\n          compareAtPrice: variant.compareAtPriceV2\n            ? {\n                amount: parseFloat(variant.compareAtPriceV2.amount),\n                currencyCode: variant.compareAtPriceV2.currencyCode,\n              }\n            : null,\n          metafields: finalVariantMetafields,\n        };\n      })\n    );\n\n    const defaultPrice = variants[0]?.price ?? {\n      amount: 0,\n      currencyCode: \"EUR\",\n    };\n\n    const defaultCompareAtPrice = variants[0]?.compareAtPrice ?? null;\n\n    const product: Product = {\n      id: node.id,\n      title: node.title,\n      handle: node.handle,\n      descriptionHtml: node.descriptionHtml || \"\",\n      featuredImage: node.featuredImage || null,\n      images,\n      variants,\n      price: defaultPrice,\n      compareAtPrice: defaultCompareAtPrice,\n      metafields,\n    };\n\n    return { data: product, error: null };\n  } catch (err) {\n    return {\n      data: null,\n      error: err instanceof Error ? err.message : \"Unexpected error\",\n    };\n  }\n}\n","import {\n  FetchShopify,\n  Product,\n  Variant,\n  VariantEdge,\n  FilterGroup,\n  GetCollectionOptions,\n  FetchCollectionResult,\n  ProductsPageInfo,\n  FetchOptions,\n} from \"@t\";\n\nimport {\n  castMetafields,\n  safeParseArray,\n  camelizeMetafields,\n  normalizeMetafields,\n  buildMetafieldIdentifiers,\n  formatAvailableFilters,\n  formatGID,\n} from \"@utils\";\n\nimport { getCollectionProductsQuery } from \"@gql\";\n\nexport async function getCollection(\n  fetchShopify: FetchShopify,\n  args: GetCollectionOptions,\n  options: FetchOptions = {}\n): Promise<FetchCollectionResult> {\n  const {\n    collectionHandle,\n    collectionId,\n    includeProducts = false,\n    limit = 12,\n    cursor,\n    reverse = false,\n    sortKey = \"RELEVANCE\",\n    filters = [],\n    productMetafields = [],\n    collectionMetafields = [],\n    variantMetafields = [],\n    options: {\n      resolveFiles = true,\n      renderRichTextAsHtml = false,\n      transformCollectionMetafields,\n      transformProductMetafields,\n      transformVariantMetafields,\n      camelizeKeys = true,\n    } = {},\n  } = args;\n\n  if (collectionHandle && collectionId) {\n    console.warn(\n      `[NextShopKit] ⚠️ You provided both 'collectionHandle' and 'collectionId'. Only one should be used.`\n    );\n  }\n\n  const handle = collectionHandle ?? null;\n  const id = collectionId ? formatGID(collectionId, \"Collection\") : null;\n\n  if (!handle && !id) {\n    return {\n      data: [],\n      pageInfo: null,\n      error: \"You must provide either collectionHandle or collectionId\",\n      collectionMetafields: {},\n    };\n  }\n\n  const productMetafieldIdentifiers =\n    productMetafields.length > 0\n      ? buildMetafieldIdentifiers(productMetafields)\n      : \"\";\n  const variantMetafieldIdentifiers =\n    variantMetafields.length > 0\n      ? buildMetafieldIdentifiers(variantMetafields)\n      : \"\";\n  const collectionMetafieldIdentifiers =\n    collectionMetafields.length > 0\n      ? buildMetafieldIdentifiers(collectionMetafields)\n      : \"\";\n\n  const query = getCollectionProductsQuery(\n    limit,\n    productMetafieldIdentifiers,\n    filters.length > 0,\n    variantMetafieldIdentifiers,\n    collectionMetafieldIdentifiers,\n    includeProducts,\n    Boolean(collectionId)\n  );\n\n  const variables = {\n    ...(collectionId ? { id: collectionId } : { handle: collectionHandle }),\n    cursor,\n    reverse,\n    sortKey,\n    filters,\n  };\n\n  try {\n    const json = await fetchShopify(query, variables, options);\n    const collection = json.data?.collection;\n\n    if (!collection) {\n      return {\n        data: [],\n        pageInfo: null,\n        error: \"Collection not found\",\n        collectionMetafields: {},\n      };\n    }\n\n    let resolvedCollectionMetafields: Record<string, any> = {};\n    if (collection.metafields) {\n      const raw = normalizeMetafields(\n        collection.metafields,\n        collectionMetafields\n      );\n      const casted = await castMetafields(\n        raw,\n        collectionMetafields,\n        renderRichTextAsHtml,\n        transformCollectionMetafields,\n        resolveFiles,\n        fetchShopify,\n        options\n      );\n      resolvedCollectionMetafields = camelizeKeys\n        ? camelizeMetafields(casted)\n        : casted;\n    }\n\n    if (!includeProducts) {\n      return {\n        data: [],\n        pageInfo: null,\n        availableFilters: [],\n        collectionMetafields: resolvedCollectionMetafields,\n        error: null,\n        collection: {\n          id: collection.id,\n          title: collection.title,\n          handle: collection.handle,\n          descriptionHtml: collection.descriptionHtml ?? \"\",\n          description: collection.description ?? \"\",\n          updatedAt: collection.updatedAt\n            ? new Date(collection.updatedAt)\n            : null,\n          image: collection.image ?? null,\n          seo: collection.seo ?? null,\n        },\n      };\n    }\n\n    const edges = safeParseArray(collection.products.edges);\n    const products: Product[] = [];\n\n    for (const edge of edges) {\n      const node = edge.node;\n\n      const rawProductMetafields = normalizeMetafields(\n        node.metafields || [],\n        productMetafields\n      );\n      const castedProductMetafields =\n        productMetafields.length > 0\n          ? await castMetafields(\n              rawProductMetafields,\n              productMetafields,\n              renderRichTextAsHtml,\n              transformProductMetafields,\n              resolveFiles,\n              fetchShopify,\n              options\n            )\n          : rawProductMetafields;\n      const metafields = camelizeKeys\n        ? camelizeMetafields(castedProductMetafields)\n        : castedProductMetafields;\n\n      const variants: Variant[] = await Promise.all(\n        safeParseArray<VariantEdge>(node.variants?.edges).map(async (edge) => {\n          const variant = edge.node;\n\n          const rawVariantMetafields = normalizeMetafields(\n            variant.metafields || [],\n            variantMetafields\n          );\n          const castedVariantMetafields =\n            variantMetafields.length > 0\n              ? await castMetafields(\n                  rawVariantMetafields,\n                  variantMetafields,\n                  renderRichTextAsHtml,\n                  transformVariantMetafields,\n                  resolveFiles,\n                  fetchShopify,\n                  options\n                )\n              : rawVariantMetafields;\n          const finalVariantMetafields = camelizeKeys\n            ? camelizeMetafields(castedVariantMetafields)\n            : castedVariantMetafields;\n\n          return {\n            id: variant.id,\n            productTitle: variant.product?.title || node.title,\n            variantTitle:\n              variant.title === \"Default Title\" ? node.title : variant.title,\n            price: {\n              amount: parseFloat(variant.priceV2.amount),\n              currencyCode: variant.priceV2.currencyCode,\n            },\n            compareAtPrice: variant.compareAtPriceV2\n              ? {\n                  amount: parseFloat(variant.compareAtPriceV2.amount),\n                  currencyCode: variant.compareAtPriceV2.currencyCode,\n                }\n              : null,\n            metafields: finalVariantMetafields,\n          };\n        })\n      );\n\n      const product: Product = {\n        id: node.id,\n        title: node.title,\n        handle: node.handle,\n        descriptionHtml: node.descriptionHtml || \"\",\n        featuredImage: node.featuredImage || null,\n        images: safeParseArray(node.images?.edges).map((edge) => edge.node),\n        variants,\n        price: {\n          amount: variants[0]?.price?.amount,\n          currencyCode: variants[0]?.price?.currencyCode,\n        },\n        compareAtPrice: variants[0]?.compareAtPrice\n          ? {\n              amount: variants[0].compareAtPrice.amount,\n              currencyCode: variants[0].compareAtPrice.currencyCode,\n            }\n          : null,\n        metafields,\n      };\n\n      products.push(product);\n    }\n\n    const pageInfo: ProductsPageInfo = collection.products.pageInfo;\n    const rawFilters = collection.products.filters || [];\n    const availableFilters: FilterGroup[] = formatAvailableFilters(rawFilters);\n\n    return {\n      data: products,\n      pageInfo,\n      availableFilters,\n      collectionMetafields: resolvedCollectionMetafields,\n      error: null,\n      collection: {\n        id: collection.id,\n        title: collection.title,\n        handle: collection.handle,\n        descriptionHtml: collection.descriptionHtml ?? \"\",\n        description: collection.description ?? \"\",\n        updatedAt: collection.updatedAt ? new Date(collection.updatedAt) : null,\n        image: collection.image ?? null,\n        seo: collection.seo ?? null,\n      },\n    };\n  } catch (error) {\n    return {\n      data: [],\n      pageInfo: {\n        hasNextPage: false,\n        hasPreviousPage: false,\n        endCursor: null,\n        startCursor: null,\n      },\n      error: error instanceof Error ? error.message : \"Unexpected error\",\n      collectionMetafields: {},\n    };\n  }\n}\n","export { createCart } from \"./createCart\";\nexport { getCart } from \"./getCart\";\n","import { FetchShopify, ShopifyCart, CartProviderConfig } from \"@t\";\nimport { createCartMutation } from \"@gql\";\nimport { safeExtract } from \"@utils\";\n\nexport async function createCart(\n  fetchShopify: FetchShopify,\n  config?: CartProviderConfig\n): Promise<ShopifyCart> {\n  const attributes = config?.customAttributes ?? [];\n\n  const response = await fetchShopify(createCartMutation, {\n    attributes,\n  });\n\n  const cart = response?.data?.cartCreate?.cart;\n\n  return safeExtract(\"createCart\", cart, {\n    config,\n    attributes,\n    response,\n  });\n}\n","import { FetchShopify, ShopifyCart, CartProviderConfig, CartLine } from \"@t\";\nimport {\n  normalizeMetafields,\n  buildMetafieldIdentifiers,\n  castMetafields,\n  camelizeMetafields,\n  safeExtract,\n} from \"@utils\";\nimport { getCartQuery } from \"@gql\";\n\nexport async function getCart(\n  fetchShopify: FetchShopify,\n  cartId: string,\n  config: CartProviderConfig = {}\n): Promise<ShopifyCart> {\n  const {\n    productMetafields = [],\n    variantMetafields = [],\n    options = {},\n  } = config;\n\n  const {\n    camelizeKeys = true,\n    renderRichTextAsHtml = false,\n    resolveFiles = false,\n    transformProductMetafields,\n    transformVariantMetafields,\n  } = options;\n\n  const productMetafieldIdentifiers = productMetafields.length\n    ? buildMetafieldIdentifiers(productMetafields)\n    : \"\";\n\n  const variantMetafieldIdentifiers = variantMetafields.length\n    ? buildMetafieldIdentifiers(variantMetafields)\n    : \"\";\n\n  const query = getCartQuery(\n    productMetafieldIdentifiers,\n    variantMetafieldIdentifiers\n  );\n  const response = await fetchShopify(query, { cartId });\n\n  const rawCart = safeExtract(\"getCart\", response?.data?.cart, {\n    cartId,\n    response,\n    config,\n  });\n\n  const rawLines = rawCart?.lines?.edges ?? [];\n\n  const resolvedLines: CartLine[] = await Promise.all(\n    rawLines.map(async ({ node }: any): Promise<CartLine> => {\n      const variant = node.merchandise;\n\n      // --- Variant Metafields ---\n      const rawVariant = normalizeMetafields(\n        variant.metafields || [],\n        variantMetafields\n      );\n\n      const castedVariant = await castMetafields(\n        rawVariant,\n        variantMetafields,\n        renderRichTextAsHtml,\n        transformVariantMetafields,\n        resolveFiles,\n        fetchShopify\n      );\n\n      const finalVariantMetafields = camelizeKeys\n        ? camelizeMetafields(castedVariant)\n        : castedVariant;\n\n      // --- Product Metafields ---\n      const product = variant.product;\n      const rawProduct = normalizeMetafields(\n        product.metafields || [],\n        productMetafields\n      );\n\n      const castedProduct = await castMetafields(\n        rawProduct,\n        productMetafields,\n        renderRichTextAsHtml,\n        transformProductMetafields,\n        resolveFiles,\n        fetchShopify\n      );\n\n      const finalProductMetafields = camelizeKeys\n        ? camelizeMetafields(castedProduct)\n        : castedProduct;\n\n      return {\n        ...node,\n        merchandise: {\n          ...variant,\n          metafields: finalVariantMetafields,\n          product: {\n            ...variant.product,\n            metafields: finalProductMetafields,\n          },\n        },\n      };\n    })\n  );\n\n  return {\n    ...rawCart,\n    lines: resolvedLines,\n  };\n}\n","export { addToCart } from \"./addToCart\";\nexport { removeFromCart } from \"./removeFromCart\";\nexport { updateCartItem } from \"./updateCartItem\";\nexport { applyDiscount } from \"./applyDiscount\";\nexport { removeDiscount } from \"./removeDiscount\";\nexport { emptyCart } from \"./emptyCart\";\nexport { mergeCarts } from \"./mergeCarts\";\nexport { updateBuyerIdentity } from \"./updateBuyerIdentity\";\nexport { updateCartAttributes } from \"./updateCartAttributes\";\n","import {\n  FetchShopify,\n  ShopifyCart,\n  CartProviderConfig,\n  LineItemInput,\n} from \"@t\";\nimport { addToCartMutation, getCartQuery } from \"@gql\";\nimport { safeExtract, buildMetafieldIdentifiers } from \"@utils\";\n\nexport async function addToCart(\n  fetchShopify: FetchShopify,\n  cartId: string,\n  lines: LineItemInput[],\n  config: CartProviderConfig = {}\n): Promise<ShopifyCart> {\n  await fetchShopify(addToCartMutation, { cartId, lines });\n\n  const { productMetafields = [], variantMetafields = [] } = config;\n\n  const productMetafieldIdentifiers = productMetafields.length\n    ? buildMetafieldIdentifiers(productMetafields)\n    : \"\";\n\n  const variantMetafieldIdentifiers = variantMetafields.length\n    ? buildMetafieldIdentifiers(variantMetafields)\n    : \"\";\n\n  const query = getCartQuery(\n    productMetafieldIdentifiers,\n    variantMetafieldIdentifiers\n  );\n\n  const response = await fetchShopify(query, { cartId });\n\n  return safeExtract(\"addToCart (fetch)\", response?.data?.cart, {\n    cartId,\n    lines,\n    response,\n  });\n}\n","import { FetchShopify, ShopifyCart, CartProviderConfig } from \"@t\";\nimport { removeFromCartMutation, getCartQuery } from \"@gql\";\nimport { safeExtract, buildMetafieldIdentifiers } from \"@utils\";\n\nexport async function removeFromCart(\n  fetchShopify: FetchShopify,\n  cartId: string,\n  lineId: string,\n  config: CartProviderConfig = {}\n): Promise<ShopifyCart> {\n  const removeResponse = await fetchShopify(removeFromCartMutation, {\n    cartId,\n    lineIds: [lineId],\n  });\n\n  const { productMetafields = [], variantMetafields = [] } = config;\n\n  const productMetafieldIdentifiers = productMetafields.length\n    ? buildMetafieldIdentifiers(productMetafields)\n    : \"\";\n\n  const variantMetafieldIdentifiers = variantMetafields.length\n    ? buildMetafieldIdentifiers(variantMetafields)\n    : \"\";\n\n  const query = getCartQuery(\n    productMetafieldIdentifiers,\n    variantMetafieldIdentifiers\n  );\n\n  const response = await fetchShopify(query, { cartId });\n\n  return safeExtract(\"removeFromCart (fetch)\", response?.data?.cart, {\n    cartId,\n    lineId,\n    response,\n  });\n}\n","import { FetchShopify, ShopifyCart, CartProviderConfig } from \"@t\";\nimport { updateCartItemMutation, getCartQuery } from \"@gql\";\nimport { safeExtract, buildMetafieldIdentifiers } from \"@utils\";\n\nexport async function updateCartItem(\n  fetchShopify: FetchShopify,\n  cartId: string,\n  lineId: string,\n  quantity: number,\n  config: CartProviderConfig = {}\n): Promise<ShopifyCart> {\n  await fetchShopify(updateCartItemMutation, {\n    cartId,\n    lines: [{ id: lineId, quantity }],\n  });\n\n  const { productMetafields = [], variantMetafields = [] } = config;\n\n  const productMetafieldIdentifiers = productMetafields.length\n    ? buildMetafieldIdentifiers(productMetafields)\n    : \"\";\n\n  const variantMetafieldIdentifiers = variantMetafields.length\n    ? buildMetafieldIdentifiers(variantMetafields)\n    : \"\";\n\n  const query = getCartQuery(\n    productMetafieldIdentifiers,\n    variantMetafieldIdentifiers\n  );\n\n  const response = await fetchShopify(query, { cartId });\n\n  return safeExtract(\"updateCartItem (fetch)\", response?.data?.cart, {\n    cartId,\n    lineId,\n    quantity,\n    response,\n  });\n}\n","// TODO: Test this action\nimport { FetchShopify, ShopifyCart } from \"@t\";\nimport { applyDiscountMutation } from \"@gql\";\nimport { safeExtract } from \"@utils\";\n\nexport async function applyDiscount(\n  fetchShopify: FetchShopify,\n  cartId: string,\n  code: string\n): Promise<ShopifyCart> {\n  const result = await fetchShopify(applyDiscountMutation, {\n    cartId,\n    discountCodes: [code],\n  });\n\n  const discountResult = result?.data?.cartDiscountCodesUpdate;\n\n  if (discountResult?.userErrors?.length) {\n    console.warn(\"[applyDiscount] User errors:\", discountResult.userErrors);\n  }\n\n  return safeExtract(\"applyDiscount\", discountResult?.cart, {\n    cartId,\n    code,\n    result,\n  });\n}\n","// TODO: Test this action\nimport { FetchShopify, ShopifyCart } from \"@t\";\nimport { removeDiscountMutation } from \"@gql\";\nimport { safeExtract } from \"@utils\";\n\nexport async function removeDiscount(\n  fetchShopify: FetchShopify,\n  cartId: string\n): Promise<ShopifyCart> {\n  const response = await fetchShopify(removeDiscountMutation, { cartId });\n\n  return safeExtract(\n    \"removeDiscount\",\n    response?.data?.cartDiscountCodesUpdate?.cart,\n    {\n      cartId,\n      response,\n    }\n  );\n}\n","import { FetchShopify, ShopifyCart, CartProviderConfig } from \"@t\";\nimport { getCartQuery, removeFromCartMutation } from \"@gql\";\nimport { safeExtract } from \"@utils\";\nimport { buildMetafieldIdentifiers } from \"@utils\";\n\nexport async function emptyCart(\n  fetchShopify: FetchShopify,\n  cartId: string,\n  config: CartProviderConfig = {}\n): Promise<ShopifyCart> {\n  const { productMetafields = [], variantMetafields = [] } = config;\n\n  const productMetafieldIdentifiers = productMetafields.length\n    ? buildMetafieldIdentifiers(productMetafields)\n    : \"\";\n\n  const variantMetafieldIdentifiers = variantMetafields.length\n    ? buildMetafieldIdentifiers(variantMetafields)\n    : \"\";\n\n  const query = getCartQuery(\n    productMetafieldIdentifiers,\n    variantMetafieldIdentifiers\n  );\n\n  const cartResponse = await fetchShopify(query, { cartId });\n\n  const cart = safeExtract(\"emptyCart (fetch)\", cartResponse?.data?.cart, {\n    cartId,\n    cartResponse,\n  });\n\n  const lines = Array.isArray(cart.lines)\n    ? cart.lines\n    : cart.lines?.edges?.map((edge: { node: any }) => edge.node) || [];\n\n  const lineIds = lines.map((line: { id: string }) => line.id);\n\n  if (lineIds.length === 0) {\n    if (process.env.NODE_ENV === \"development\") {\n      console.debug(\"[emptyCart] Cart already empty\");\n    }\n    return cart;\n  }\n\n  const removeResponse = await fetchShopify(removeFromCartMutation, {\n    cartId,\n    lineIds,\n  });\n\n  return safeExtract(\n    \"emptyCart (remove)\",\n    removeResponse?.data?.cartLinesRemove?.cart,\n    {\n      cartId,\n      lineIds,\n      removeResponse,\n    }\n  );\n}\n","// TODO: Test this action\nimport { FetchShopify, ShopifyCart } from \"@t\";\nimport { mergeCartsMutation } from \"@gql\";\nimport { safeExtract } from \"@utils\";\n\nexport async function mergeCarts(\n  fetchShopify: FetchShopify,\n  sourceCartId: string,\n  destinationCartId: string\n): Promise<ShopifyCart> {\n  const response = await fetchShopify(mergeCartsMutation, {\n    sourceCartId,\n    destinationCartId,\n  });\n\n  return safeExtract(\"mergeCarts\", response?.data?.cartMerge?.cart, {\n    sourceCartId,\n    destinationCartId,\n    response,\n  });\n}\n","// TODO: Test this action\nimport { FetchShopify, ShopifyCart, BuyerIdentityInput } from \"@t\";\nimport { updateBuyerIdentityMutation } from \"@gql\";\nimport { safeExtract } from \"@utils\";\n\nexport async function updateBuyerIdentity(\n  fetchShopify: FetchShopify,\n  cartId: string,\n  buyerIdentity: BuyerIdentityInput\n): Promise<ShopifyCart> {\n  const response = await fetchShopify(updateBuyerIdentityMutation, {\n    cartId,\n    buyerIdentity,\n  });\n\n  return safeExtract(\n    \"updateBuyerIdentity\",\n    response?.data?.cartBuyerIdentityUpdate?.cart,\n    {\n      cartId,\n      buyerIdentity,\n      response,\n    }\n  );\n}\n","// TODO: Test this action\nimport { FetchShopify, ShopifyCart, CartAttribute } from \"@t\";\nimport { updateCartAttributesMutation } from \"@gql\";\nimport { safeExtract } from \"@utils\";\n\nexport async function updateCartAttributes(\n  fetchShopify: FetchShopify,\n  cartId: string,\n  attributes: CartAttribute[]\n): Promise<ShopifyCart> {\n  const response = await fetchShopify(updateCartAttributesMutation, {\n    cartId,\n    attributes,\n  });\n\n  return safeExtract(\n    \"updateCartAttributes\",\n    response?.data?.cartAttributesUpdate?.cart,\n    {\n      cartId,\n      attributes,\n      response,\n    }\n  );\n}\n","import { createSharedShopify } from \"@clients/createSharedShopify\";\n\nimport {\n  getProduct,\n  getCollection,\n  cartActions,\n  cartMutations,\n} from \"@actions\";\n\nimport { ShopifyBaseClient, ShopifyClientConfig } from \"@t\";\n\nexport function createBaseClient(\n  config: ShopifyClientConfig\n): ShopifyBaseClient {\n  const shared = createSharedShopify(config);\n\n  return {\n    fetchShopify: shared.fetchShopify,\n    clearCache: shared.clearCache,\n    getCache: shared.getCache,\n\n    // core\n    getProduct: (args) => getProduct(shared.fetchShopify, args),\n    getCollection: (args) => getCollection(shared.fetchShopify, args),\n\n    // cart\n    createCart: () => cartActions.createCart(shared.fetchShopify),\n    getCart: (cartId) => cartActions.getCart(shared.fetchShopify, cartId),\n    addToCart: (cartId, lines) =>\n      cartMutations.addToCart(shared.fetchShopify, cartId, lines),\n    removeFromCart: (cartId, lineId) =>\n      cartMutations.removeFromCart(shared.fetchShopify, cartId, lineId),\n    updateCartItem: (cartId, lineId, quantity) =>\n      cartMutations.updateCartItem(\n        shared.fetchShopify,\n        cartId,\n        lineId,\n        quantity\n      ),\n    emptyCart: (cartId) => cartMutations.emptyCart(shared.fetchShopify, cartId),\n    applyDiscount: (cartId, code) =>\n      cartMutations.applyDiscount(shared.fetchShopify, cartId, code),\n    removeDiscount: (cartId) =>\n      cartMutations.removeDiscount(shared.fetchShopify, cartId),\n    updateCartAttributes: (cartId, attributes) =>\n      cartMutations.updateCartAttributes(\n        shared.fetchShopify,\n        cartId,\n        attributes\n      ),\n    updateBuyerIdentity: (cartId, buyerIdentity) =>\n      cartMutations.updateBuyerIdentity(\n        shared.fetchShopify,\n        cartId,\n        buyerIdentity\n      ),\n    mergeCarts: (sourceCartId, destinationCartId) =>\n      cartMutations.mergeCarts(\n        shared.fetchShopify,\n        sourceCartId,\n        destinationCartId\n      ),\n  };\n}\n","import { createBaseClient } from \"@clients/createBaseClient\";\nimport { ShopifyClient, ShopifyClientConfig } from \"@t\";\n\nexport function createShopifyClient(\n  config: ShopifyClientConfig\n): ShopifyClient {\n  return createBaseClient(config);\n}\n"],"mappings":"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","names":["error","edge","error"]}