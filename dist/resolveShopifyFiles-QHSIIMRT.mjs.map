{"version":3,"sources":["../src/shared/utils/resolveShopifyFiles.ts"],"sourcesContent":["import { FetchShopify } from \"@t/fetch\";\nimport { FetchOptions } from \"@t/fetchResult\";\n\nconst FILES_QUERY = `\n  query getFiles($ids: [ID!]!) {\n  nodes(ids: $ids) {\n    __typename\n    ... on GenericFile {\n      id\n      url\n      mimeType\n      alt\n      originalFileSize\n      previewImage {\n        id\n        url\n      }\n    }\n    ... on MediaImage {\n      id\n      image {\n        url\n        altText\n      }\n    }\n  }\n}\n\n`;\n\n\nexport async function resolveShopifyFiles(\n  fileIds: string[],\n  fetchShopify: FetchShopify,\n  options: FetchOptions\n): Promise<Record<string, any>> {\n  const resultMap: Record<string, any> = {};\n  if (fileIds.length === 0) return resultMap;\n\n  try {\n    const res = await fetchShopify(FILES_QUERY, { ids: fileIds }, options);\n    const nodes = res.data?.nodes || [];\n\n    for (const file of nodes) {\n      if (!file?.id) continue;\n\n      switch (file.__typename) {\n        case \"GenericFile\":\n          resultMap[file.id] = file;\n          break;\n\n        case \"MediaImage\":\n          resultMap[file.id] = {\n            id: file.id,\n            url: file.image?.url,\n            alt: file.image?.altText ?? null,\n          };\n          break;\n\n        case \"MediaVideo\":\n          resultMap[file.id] = {\n            id: file.id,\n            videoSources: file.sources,\n          };\n          break;\n\n        case \"ExternalVideo\":\n          resultMap[file.id] = {\n            id: file.id,\n            embedUrl: file.embedUrl,\n            host: file.host,\n          };\n          break;\n      }\n    }\n\n\n\n    return resultMap;\n  } catch (err) {\n    console.error(\"Error resolving files:\", err);\n    return resultMap;\n  }\n}\n"],"mappings":";AAGA,IAAM,cAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA4BpB,eAAsB,oBACpB,SACA,cACA,SAC8B;AAC9B,QAAM,YAAiC,CAAC;AACxC,MAAI,QAAQ,WAAW;AAAG,WAAO;AAEjC,MAAI;AACF,UAAM,MAAM,MAAM,aAAa,aAAa,EAAE,KAAK,QAAQ,GAAG,OAAO;AACrE,UAAM,QAAQ,IAAI,MAAM,SAAS,CAAC;AAElC,eAAW,QAAQ,OAAO;AACxB,UAAI,CAAC,MAAM;AAAI;AAEf,cAAQ,KAAK,YAAY;AAAA,QACvB,KAAK;AACH,oBAAU,KAAK,EAAE,IAAI;AACrB;AAAA,QAEF,KAAK;AACH,oBAAU,KAAK,EAAE,IAAI;AAAA,YACnB,IAAI,KAAK;AAAA,YACT,KAAK,KAAK,OAAO;AAAA,YACjB,KAAK,KAAK,OAAO,WAAW;AAAA,UAC9B;AACA;AAAA,QAEF,KAAK;AACH,oBAAU,KAAK,EAAE,IAAI;AAAA,YACnB,IAAI,KAAK;AAAA,YACT,cAAc,KAAK;AAAA,UACrB;AACA;AAAA,QAEF,KAAK;AACH,oBAAU,KAAK,EAAE,IAAI;AAAA,YACnB,IAAI,KAAK;AAAA,YACT,UAAU,KAAK;AAAA,YACf,MAAM,KAAK;AAAA,UACb;AACA;AAAA,MACJ;AAAA,IACF;AAIA,WAAO;AAAA,EACT,SAAS,KAAK;AACZ,YAAQ,MAAM,0BAA0B,GAAG;AAC3C,WAAO;AAAA,EACT;AACF;","names":[]}