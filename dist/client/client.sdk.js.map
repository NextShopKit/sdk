{"version":3,"sources":["../../src/entries/client.sdk.ts","../../src/components/CartProvider.tsx","../../src/hooks/useCart.ts"],"sourcesContent":["// src/entries/client.ts\nexport { CartProvider } from \"@components\";\nexport { useCart } from \"@hooks\";\n","\"use client\";\n\nimport { createContext, useEffect, useState, ReactNode } from \"react\";\nimport {\n  ShopifyClient,\n  ShopifyCart,\n  BuyerIdentityInput,\n  CartAttribute,\n  LineItemInput,\n  CartLine,\n} from \"@t\";\n\nexport interface CartContextType {\n  cart: ShopifyCart | null;\n  loading: boolean;\n  addProducts: (lines: LineItemInput[]) => Promise<void>;\n  removeProduct: (lineId: string) => Promise<void>;\n  updateQuantity: (lineId: string, quantity: number) => Promise<void>;\n  applyDiscountCode: (code: string) => Promise<void>;\n  removeDiscountCode: () => Promise<void>;\n  emptyCart: () => Promise<void>;\n  mergeCarts: (sourceCartId: string) => Promise<void>;\n  updateBuyerIdentity: (buyerIdentity: BuyerIdentityInput) => Promise<void>;\n  updateCartAttributes: (attributes: CartAttribute[]) => Promise<void>;\n  resetCart: () => Promise<void>;\n  totalCount: number;\n  totalPrice: number;\n}\n\nexport const CartContext = createContext<CartContextType | undefined>(\n  undefined\n);\n\nexport function CartProvider({\n  children,\n  client,\n  debug = false,\n}: {\n  children: ReactNode;\n  client: ShopifyClient;\n  debug?: boolean;\n}) {\n  const [cart, setCart] = useState<ShopifyCart | null>(null);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [totalCount, setTotalCount] = useState<number>(0);\n  const [totalPrice, setTotalPrice] = useState<number>(0);\n\n  const isDev = process.env.NODE_ENV === \"development\";\n  const log = (...args: any[]) => {\n    if (isDev && debug) console.log(\"[CartContext]\", ...args);\n  };\n\n  useEffect(() => {\n    const init = async () => {\n      console.log(\"[CartContext] Initializing cart...\");\n      const storedCartId = localStorage.getItem(\"shopify_cart_id\");\n      console.log(\"[CartContext] Found cart ID:\", storedCartId);\n\n      try {\n        let initialCart: ShopifyCart;\n        if (storedCartId) {\n          initialCart = await client.getCart(storedCartId);\n          console.log(\"[CartContext] Fetched existing cart:\", initialCart);\n        } else {\n          initialCart = await client.createCart();\n          localStorage.setItem(\"shopify_cart_id\", initialCart.id);\n          console.log(\"[CartContext] Created new cart:\", initialCart);\n        }\n\n        if (!initialCart || !initialCart.id) {\n          console.error(\"[CartContext] Invalid cart received:\", initialCart);\n        } else {\n          updateCartState(initialCart);\n          console.log(\"[CartContext] Cart initialized successfully\");\n        }\n      } catch (err) {\n        console.error(\"[CartContext] Cart init error\", err);\n      }\n\n      setLoading(false);\n    };\n\n    init();\n    window.addEventListener(\"storage\", (e) => {\n      if (e.key === \"shopify_cart_id\") init();\n    });\n  }, [client]);\n\n  const updateCartState = (cart: ShopifyCart) => {\n    let flatLines: CartLine[] = [];\n\n    if (Array.isArray(cart.lines)) {\n      flatLines = cart.lines;\n    } else if (\n      cart.lines &&\n      typeof cart.lines === \"object\" &&\n      \"edges\" in cart.lines &&\n      Array.isArray((cart.lines as any).edges)\n    ) {\n      flatLines = (cart.lines as { edges: { node: CartLine }[] }).edges.map(\n        (edge) => edge.node\n      );\n    }\n\n    if (debug && process.env.NODE_ENV === \"development\") {\n      console.log(\"[CartContext] Updating cart state:\", {\n        id: cart.id,\n        checkoutUrl: cart.checkoutUrl,\n        totalAmount: cart.cost?.totalAmount,\n        lineCount: flatLines.length,\n      });\n      console.log(\"[CartContext] Lines:\", flatLines);\n    }\n\n    setCart({ ...cart, lines: flatLines });\n\n    const total = flatLines.reduce(\n      (sum, line) => sum + (line.quantity || 0),\n      0\n    );\n    const price = parseFloat(cart.cost?.totalAmount?.amount || \"0\");\n\n    setTotalCount(total);\n    setTotalPrice(price);\n  };\n\n  const addProducts = async (lines: LineItemInput[]) => {\n    if (!cart) return;\n    log(\"Adding products:\", lines);\n    setLoading(true);\n    const updated = await client.addToCart(cart.id, lines);\n    log(\"Cart after adding:\", updated);\n    updateCartState(updated);\n    setLoading(false);\n  };\n\n  const removeProduct = async (lineId: string) => {\n    if (!cart) return;\n    log(\"Removing product with line ID:\", lineId);\n    setLoading(true);\n    const updated = await client.removeFromCart(cart.id, lineId);\n    log(\"Cart after removal:\", updated);\n    updateCartState(updated);\n    setLoading(false);\n  };\n\n  const updateQuantity = async (lineId: string, quantity: number) => {\n    if (!cart) return;\n    log(\"Updating quantity:\", { lineId, quantity });\n    setLoading(true);\n    const updated = await client.updateCartItem(cart.id, lineId, quantity);\n    log(\"Cart after quantity update:\", updated);\n    updateCartState(updated);\n    setLoading(false);\n  };\n\n  const applyDiscountCode = async (code: string) => {\n    if (!cart) return;\n    log(\"Applying discount code:\", code);\n    setLoading(true);\n    const updated = await client.applyDiscount(cart.id, code);\n    log(\"Cart after discount:\", updated);\n    updateCartState(updated);\n    setLoading(false);\n  };\n\n  const removeDiscountCode = async () => {\n    if (!cart) return;\n    log(\"Removing discount code...\");\n    setLoading(true);\n    const updated = await client.removeDiscount(cart.id);\n    log(\"Cart after removing discount:\", updated);\n    updateCartState(updated);\n    setLoading(false);\n  };\n\n  const emptyCart = async () => {\n    if (!cart) return;\n    log(\"Emptying cart...\");\n    setLoading(true);\n    const updated = await client.emptyCart(cart.id);\n    log(\"Cart after emptying:\", updated);\n    updateCartState(updated);\n    setLoading(false);\n  };\n\n  const mergeCarts = async (sourceCartId: string) => {\n    if (!cart) return;\n    log(\"Merging carts:\", sourceCartId, \"into\", cart.id);\n    setLoading(true);\n    const updated = await client.mergeCarts(sourceCartId, cart.id);\n    log(\"Cart after merging:\", updated);\n    updateCartState(updated);\n    setLoading(false);\n  };\n\n  const updateBuyerIdentity = async (buyerIdentity: BuyerIdentityInput) => {\n    if (!cart) return;\n    log(\"Updating buyer identity:\", buyerIdentity);\n    setLoading(true);\n    const updated = await client.updateBuyerIdentity(cart.id, buyerIdentity);\n    log(\"Cart after buyer identity update:\", updated);\n    updateCartState(updated);\n    setLoading(false);\n  };\n\n  const updateCartAttributes = async (attributes: CartAttribute[]) => {\n    if (!cart) return;\n    log(\"Updating cart attributes:\", attributes);\n    setLoading(true);\n    const updated = await client.updateCartAttributes(cart.id, attributes);\n    log(\"Cart after attribute update:\", updated);\n    updateCartState(updated);\n    setLoading(false);\n  };\n\n  const resetCart = async () => {\n    log(\"Resetting cart...\");\n    setLoading(true);\n    const newCart = await client.createCart();\n    localStorage.setItem(\"shopify_cart_id\", newCart.id);\n    log(\"New cart created:\", newCart);\n    updateCartState(newCart);\n    setLoading(false);\n  };\n\n  return (\n    <CartContext.Provider\n      value={{\n        cart,\n        loading,\n        addProducts,\n        removeProduct,\n        updateQuantity,\n        applyDiscountCode,\n        removeDiscountCode,\n        emptyCart,\n        mergeCarts,\n        updateBuyerIdentity,\n        updateCartAttributes,\n        resetCart,\n        totalCount,\n        totalPrice,\n      }}\n    >\n      {children}\n    </CartContext.Provider>\n  );\n}\n","import { useContext } from \"react\";\nimport { CartContext, CartContextType } from \"@components/CartProvider\";\n\nexport function useCart(): CartContextType {\n  const context = useContext(CartContext);\n  if (!context) {\n    throw new Error(\"useCart must be used within a CartProvider\");\n  }\n  return context;\n}\n"],"mappings":"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","names":["cart","import_react"]}